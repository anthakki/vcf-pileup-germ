#!/usr/bin/env python3

import gzip
import io
import collections

def gzopen_r(path, mode = 'r'):
	file = open(path, 'rb')

	if file.peek(2)[:2] == b'\x1f\x8b':
		file = gzip.GzipFile( fileobj = file, mode = 'rb' )
	if 'b' not in mode:
		file = io.TextIOWrapper(file)

	return file

def chomp(line):
	if line.endswith('\n'):
		line = line[:-1]
	if line.endswith('\r'):
		line = line[:-1]

	return line

def chomp_from(stream):
	for line in stream:
		yield chomp(line)

class VCFParser:
	_VCF_HEAD = ('CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'FORMAT')

	@classmethod
	def is_sample_field(clazz, head):
		return head not in clazz._VCF_HEAD

	def __init__(self, stream):
		self._gen = chomp_from(stream)

		self.comm = []
		self.head = None

		for line in self._gen:
			if line.startswith('##'):
				self.comm.append( line )
			elif line.startswith('#'):
				self.head = line[1:].split('\t')
				break
			else:
				raise Exception('missing VCF header')

		if not tuple( self.head[:len(self._VCF_HEAD)] ) == self._VCF_HEAD:
			raise Exception('invalid VCF header')

	def __iter__(self):
		for line in self._gen:
			data = line.split('\t')
			assert len(data) == len(self.head)

			yield data

def parse_info(str):
	if str != '.':
		return collections.OrderedDict( item.split('=', 1)
			if '=' in item else (item, True) for item in str.split(';') )
	else:
		return collections.OrderedDict()

def make_info(args):
	if len(args) > 0:
		return ';'.join( f'{key}={val}' if val is not True else key
			for key, val in args.items() )
	else:
		return '.'

def parse_format(str):
	if str != '.':
		return str.split(':')
	else:
		return []

def make_format(args):
	if len(args) > 0:
		return ':'.join(args)
	else:
		return '.'

def iter_stopped(iter):
	try:
		next(iter)
		return False
	except StopIteration:
		return True

def reduce(fun, seq):
	gen = ( it for it in seq )

	for lhs in gen:
		break
	for rhs in gen:
		lhs = fun( lhs, rhs )

	return lhs

if __name__ == '__main__':
	import sys

	header = False
	args = sys.argv[1:]

	if len(args) > 0 and args[0] == '-h':
		header = True
		args = args[1:]

	if len(args) < 1:
		sys.stderr.write(f'Usage: { sys.argv[0] } [-h] input.vcf [...]' + '\n')
		sys.exit(1)

	files = [ gzopen_r(arg, 'r') for arg in args ]
	parsers = [ VCFParser(file) for file in files ]

	def merge_comm(comm1, comm2):
		seen = collections.OrderedDict()
		comm = []

		for line in comm1:
			seen[line] = True
			comm.append(line)

		for line in comm2:
			if line not in seen:
				seen[line] = True
				comm.append(line)

		return comm

	if True:
		for parser in parsers:
			head = parser.head
			break
		for parser in parsers:
			assert len(parser.head) == len(head)
			if tuple(parser.head) != tuple(head):
				sys.stderr.write('warning: sample names mismatch, using names from the first file' + '\n')

		if header:
			comm = reduce( merge_comm, ( parser.comm for parser in parsers ) )
			for line in comm:
				sys.stdout.write( line + '\n' )

		sys.stdout.write( '#' + '\t'.join(head) + '\n' )

	def merge_lines(line1, line2):
		line = []
		for key, val1, val2 in zip(head, line1, line2):
			if key in ('CHROM', 'POS', 'REF', 'ALT'):
				assert val1 == val2
				val = val1
			elif val1 == val2:
				val = val1
			elif val2 == '.':
				val = val1
			elif val1 == '.':
				val = val2
			else:
				if key == 'INFO':
					info = parse_info(val1)

					for key, val in parse_info(val2).items():
						if key not in info:
							info[key] = val
						elif val == '.' or val == info[key]:
							pass
						elif info[key] == '.':
							info[key] = val
						else:
							raise Exception('conflicting values { info[key] } and {val} for INFO item {key}')

					val = make_info(info)

				elif key == 'FORMAT':
					val = make_format( parse_format(val1) + parse_format(val2) )
				elif VCFParser.is_sample_field(key):
					val = make_format( parse_format(val1) + parse_format(val2) )
				else:
					raise Exception(f'merge not implemented for field {key}')

			line.append(val)

		return line

	for lines in zip( *parsers ):
		line = reduce( merge_lines, lines )
		sys.stdout.write( '\t'.join( str(item) for item in line ) + '\n' )

	for arg, parser in zip(args, parsers):
		if not iter_stopped(iter(parser)):
			raise Exception(f'{arg}: excess items')

	for file in files:
		file.close()

