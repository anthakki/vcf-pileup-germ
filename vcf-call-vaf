#!/usr/bin/env python3

import gzip
import io
import collections

def gzopen_r(path, mode = 'r'):
	file = open(path, 'rb')

	if file.peek(2)[:2] == b'\x1f\x8b':
		file = gzip.GzipFile( fileobj = file, mode = 'rb' )
	if 'b' not in mode:
		file = io.TextIOWrapper(file)

	return file

def chomp(line):
	if line.endswith('\n'):
		line = line[:-1]
	if line.endswith('\r'):
		line = line[:-1]

	return line

class VCFParser:
	_VCF_HEAD = ('CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'FORMAT')

	@classmethod
	def is_sample_field(clazz, head):
		return head not in clazz._VCF_HEAD

	def __init__(self, stream):
		self._gen = ( chomp(line) for line in stream )

		self.comm = []
		self.head = None

		for line in self._gen:
			if line.startswith('##'):
				self.comm.append( line )
			elif line.startswith('#'):
				self.head = line[1:].split('\t')
				break
			else:
				raise Exception('missing VCF header')

		if not tuple( self.head[:len(self._VCF_HEAD)] ) == self._VCF_HEAD:
			raise Exception('invalid VCF header')

	def __iter__(self):
		for line in self._gen:
			data = line.split('\t')
			assert len(data) == len(self.head)

			yield data

def parse_info(str):
	if str != '.':
		return collections.OrderedDict( item.split('=', 1)
			if '=' in item else (item, True) for item in str.split(';') )
	else:
		return collections.OrderedDict()

def make_info(args):
	if len(args) > 0:
		return ';'.join( f'{key}={val}' if val is not True else key
			for key, val in args.items() )
	else:
		return '.'

def parse_format(str):
	if str != '.':
		return str.split(':')
	else:
		return []

def make_format(args):
	if len(args) > 0:
		return ':'.join(args)
	else:
		return '.'

def ieee_div(x, y):
	if y != 0:
		return x / y
	else:
		return x * float('inf')

if __name__ == '__main__':
	import sys
	import getopt

	def usage():
		sys.stderr.write(f'Usage: { sys.argv[0] } [-h] [-v vaf_or] [-s sample] [-S sample] input.vcf' + '\n')
		sys.exit(1)

	header = False
	vaf_or_th = 1.
	germ_samples = collections.OrderedDict()
	germ_sample_default = True

	try:
		opts, (input_fn,) = getopt.getopt(sys.argv[1:], 'h v: s:S:')
	except ValueError:
		usage()
	except getopt.GetoptError:
		usage()

	for key, val in opts:
		if key == '-h':
			header = True
		if key == '-v':
			vaf_or_th = float(val)
		if key == '-s':
			germ_samples[val] = True
			germ_sample_default = False
		if key == '-S':
			germ_samples[val] = False
			germ_sample_default = True

	with gzopen_r(input_fn, 'r') as stream:
		parser = VCFParser(stream)

		if True:
			if header:
				for line in parser.comm:
					sys.stdout.write( line + '\n')
			sys.stdout.write( '#' + '\t'.join(parser.head) + '\n' )

		info_ix = parser.head.index('INFO')
		format_ix = parser.head.index('FORMAT')

		sample_ixs = [ ix for ix, key in enumerate(parser.head)
			if VCFParser.is_sample_field(key) ]

		for line in parser:
			tum_ad = [ 0, 0 ]
			nor_ad = [ 0, 0 ]

			keys = parse_format( line[format_ix] )
			for ix in sample_ixs:
				vals = parse_format( line[ix] )
				data = collections.OrderedDict(zip(keys, vals))

				ad = [ int(val) for val in data['AD'].split(',') ]

				if not germ_samples.get(parser.head[ix], germ_sample_default):
					tum_ad[0], tum_ad[1] = tum_ad[0] + ad[0], tum_ad[1] + ad[1]
				else:
					nor_ad[0], nor_ad[1] = nor_ad[0] + ad[0], nor_ad[1] + ad[1]

			vaf_or = ieee_div( sum( tum_ad[1:] ) * nor_ad[0], tum_ad[0] * sum( nor_ad[1:] ) )

			if vaf_or > vaf_or_th:
				vaf_flag, com_vaf_flag = 'HIVAF', 'LOVAF'
			else:
				vaf_flag, com_vaf_flag = 'LOVAF', 'HIVAF'

			info = parse_info(line[info_ix])
			if True:
				info[vaf_flag] = True
			if com_vaf_flag in info:
				del info[com_vaf_flag]
			line[info_ix] = make_info(info)

			sys.stdout.write( '\t'.join(line) + '\n' )
